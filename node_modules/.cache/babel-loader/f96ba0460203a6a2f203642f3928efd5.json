{"ast":null,"code":"import _createClass from \"/Users/boris/Desktop/GitHub/work-with-jsonplaceholder-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/Users/boris/Desktop/GitHub/work-with-jsonplaceholder-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/boris/Desktop/GitHub/work-with-jsonplaceholder-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/boris/Desktop/GitHub/work-with-jsonplaceholder-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/boris/Desktop/GitHub/work-with-jsonplaceholder-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _slicedToArray from \"/Users/boris/Desktop/GitHub/work-with-jsonplaceholder-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/Users/boris/Desktop/GitHub/work-with-jsonplaceholder-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nimport { warn, camelize, callWithAsyncErrorHandling, defineComponent, nextTick, createVNode, getCurrentInstance, watchPostEffect, onMounted, onUnmounted, Fragment, Static, h, BaseTransition, useTransitionState, onUpdated, toRaw, getTransitionRawChildren, setTransitionHooks, resolveTransitionHooks, createRenderer, isRuntimeOnly, createHydrationRenderer } from '@vue/runtime-core';\nexport * from '@vue/runtime-core';\nimport { isString, isArray, hyphenate, capitalize, isSpecialBooleanAttr, includeBooleanAttr, isOn, isModelListener, isFunction, camelize as camelize$1, toNumber, extend, EMPTY_OBJ, isObject, invokeArrayFns, looseIndexOf, isSet, looseEqual, isHTMLTag, isSVGTag } from '@vue/shared';\nvar svgNS = 'http://www.w3.org/2000/svg';\nvar doc = typeof document !== 'undefined' ? document : null;\nvar templateContainer = doc && /*#__PURE__*/doc.createElement('template');\nvar nodeOps = {\n  insert: function insert(child, parent, anchor) {\n    parent.insertBefore(child, anchor || null);\n  },\n  remove: function remove(child) {\n    var parent = child.parentNode;\n    if (parent) {\n      parent.removeChild(child);\n    }\n  },\n  createElement: function createElement(tag, isSVG, is, props) {\n    var el = isSVG ? doc.createElementNS(svgNS, tag) : doc.createElement(tag, is ? {\n      is: is\n    } : undefined);\n    if (tag === 'select' && props && props.multiple != null) {\n      el.setAttribute('multiple', props.multiple);\n    }\n    return el;\n  },\n  createText: function createText(text) {\n    return doc.createTextNode(text);\n  },\n  createComment: function createComment(text) {\n    return doc.createComment(text);\n  },\n  setText: function setText(node, text) {\n    node.nodeValue = text;\n  },\n  setElementText: function setElementText(el, text) {\n    el.textContent = text;\n  },\n  parentNode: function parentNode(node) {\n    return node.parentNode;\n  },\n  nextSibling: function nextSibling(node) {\n    return node.nextSibling;\n  },\n  querySelector: function querySelector(selector) {\n    return doc.querySelector(selector);\n  },\n  setScopeId: function setScopeId(el, id) {\n    el.setAttribute(id, '');\n  },\n  // __UNSAFE__\n  // Reason: innerHTML.\n  // Static content here can only come from compiled templates.\n  // As long as the user only uses trusted templates, this is safe.\n  insertStaticContent: function insertStaticContent(content, parent, anchor, isSVG, start, end) {\n    // <parent> before | first ... last | anchor </parent>\n    var before = anchor ? anchor.previousSibling : parent.lastChild;\n    // #5308 can only take cached path if:\n    // - has a single root node\n    // - nextSibling info is still available\n    if (start && (start === end || start.nextSibling)) {\n      // cached\n      while (true) {\n        parent.insertBefore(start.cloneNode(true), anchor);\n        if (start === end || !(start = start.nextSibling)) break;\n      }\n    } else {\n      // fresh insert\n      templateContainer.innerHTML = isSVG ? \"<svg>\".concat(content, \"</svg>\") : content;\n      var template = templateContainer.content;\n      if (isSVG) {\n        // remove outer svg wrapper\n        var wrapper = template.firstChild;\n        while (wrapper.firstChild) {\n          template.appendChild(wrapper.firstChild);\n        }\n        template.removeChild(wrapper);\n      }\n      parent.insertBefore(template, anchor);\n    }\n    return [\n    // first\n    before ? before.nextSibling : parent.firstChild,\n    // last\n    anchor ? anchor.previousSibling : parent.lastChild];\n  }\n};\n\n// compiler should normalize class + :class bindings on the same element\n// into a single binding ['staticClass', dynamic]\nfunction patchClass(el, value, isSVG) {\n  // directly setting className should be faster than setAttribute in theory\n  // if this is an element during a transition, take the temporary transition\n  // classes into account.\n  var transitionClasses = el._vtc;\n  if (transitionClasses) {\n    value = (value ? [value].concat(_toConsumableArray(transitionClasses)) : _toConsumableArray(transitionClasses)).join(' ');\n  }\n  if (value == null) {\n    el.removeAttribute('class');\n  } else if (isSVG) {\n    el.setAttribute('class', value);\n  } else {\n    el.className = value;\n  }\n}\nfunction patchStyle(el, prev, next) {\n  var style = el.style;\n  var isCssString = isString(next);\n  if (next && !isCssString) {\n    for (var key in next) {\n      setStyle(style, key, next[key]);\n    }\n    if (prev && !isString(prev)) {\n      for (var _key in prev) {\n        if (next[_key] == null) {\n          setStyle(style, _key, '');\n        }\n      }\n    }\n  } else {\n    var currentDisplay = style.display;\n    if (isCssString) {\n      if (prev !== next) {\n        style.cssText = next;\n      }\n    } else if (prev) {\n      el.removeAttribute('style');\n    }\n    // indicates that the `display` of the element is controlled by `v-show`,\n    // so we always keep the current `display` value regardless of the `style`\n    // value, thus handing over control to `v-show`.\n    if ('_vod' in el) {\n      style.display = currentDisplay;\n    }\n  }\n}\nvar semicolonRE = /[^\\\\];\\s*$/;\nvar importantRE = /\\s*!important$/;\nfunction setStyle(style, name, val) {\n  if (isArray(val)) {\n    val.forEach(function (v) {\n      return setStyle(style, name, v);\n    });\n  } else {\n    if (val == null) val = '';\n    if (process.env.NODE_ENV !== 'production') {\n      if (semicolonRE.test(val)) {\n        warn(\"Unexpected semicolon at the end of '\".concat(name, \"' style value: '\").concat(val, \"'\"));\n      }\n    }\n    if (name.startsWith('--')) {\n      // custom property definition\n      style.setProperty(name, val);\n    } else {\n      var prefixed = autoPrefix(style, name);\n      if (importantRE.test(val)) {\n        // !important\n        style.setProperty(hyphenate(prefixed), val.replace(importantRE, ''), 'important');\n      } else {\n        style[prefixed] = val;\n      }\n    }\n  }\n}\nvar prefixes = ['Webkit', 'Moz', 'ms'];\nvar prefixCache = {};\nfunction autoPrefix(style, rawName) {\n  var cached = prefixCache[rawName];\n  if (cached) {\n    return cached;\n  }\n  var name = camelize(rawName);\n  if (name !== 'filter' && name in style) {\n    return prefixCache[rawName] = name;\n  }\n  name = capitalize(name);\n  for (var i = 0; i < prefixes.length; i++) {\n    var prefixed = prefixes[i] + name;\n    if (prefixed in style) {\n      return prefixCache[rawName] = prefixed;\n    }\n  }\n  return rawName;\n}\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\nfunction patchAttr(el, key, value, isSVG, instance) {\n  if (isSVG && key.startsWith('xlink:')) {\n    if (value == null) {\n      el.removeAttributeNS(xlinkNS, key.slice(6, key.length));\n    } else {\n      el.setAttributeNS(xlinkNS, key, value);\n    }\n  } else {\n    // note we are only checking boolean attributes that don't have a\n    // corresponding dom prop of the same name here.\n    var isBoolean = isSpecialBooleanAttr(key);\n    if (value == null || isBoolean && !includeBooleanAttr(value)) {\n      el.removeAttribute(key);\n    } else {\n      el.setAttribute(key, isBoolean ? '' : value);\n    }\n  }\n}\n\n// __UNSAFE__\n// functions. The user is responsible for using them with only trusted content.\nfunction patchDOMProp(el, key, value,\n// the following args are passed only due to potential innerHTML/textContent\n// overriding existing VNodes, in which case the old tree must be properly\n// unmounted.\nprevChildren, parentComponent, parentSuspense, unmountChildren) {\n  if (key === 'innerHTML' || key === 'textContent') {\n    if (prevChildren) {\n      unmountChildren(prevChildren, parentComponent, parentSuspense);\n    }\n    el[key] = value == null ? '' : value;\n    return;\n  }\n  if (key === 'value' && el.tagName !== 'PROGRESS' &&\n  // custom elements may use _value internally\n  !el.tagName.includes('-')) {\n    // store value as _value as well since\n    // non-string values will be stringified.\n    el._value = value;\n    var newValue = value == null ? '' : value;\n    if (el.value !== newValue ||\n    // #4956: always set for OPTION elements because its value falls back to\n    // textContent if no value attribute is present. And setting .value for\n    // OPTION has no side effect\n    el.tagName === 'OPTION') {\n      el.value = newValue;\n    }\n    if (value == null) {\n      el.removeAttribute(key);\n    }\n    return;\n  }\n  var needRemove = false;\n  if (value === '' || value == null) {\n    var type = typeof el[key];\n    if (type === 'boolean') {\n      // e.g. <select multiple> compiles to { multiple: '' }\n      value = includeBooleanAttr(value);\n    } else if (value == null && type === 'string') {\n      // e.g. <div :id=\"null\">\n      value = '';\n      needRemove = true;\n    } else if (type === 'number') {\n      // e.g. <img :width=\"null\">\n      value = 0;\n      needRemove = true;\n    }\n  }\n  // some properties perform value validation and throw,\n  // some properties has getter, no setter, will error in 'use strict'\n  // eg. <select :type=\"null\"></select> <select :willValidate=\"null\"></select>\n  try {\n    el[key] = value;\n  } catch (e) {\n    // do not warn if value is auto-coerced from nullish values\n    if (process.env.NODE_ENV !== 'production' && !needRemove) {\n      warn(\"Failed setting prop \\\"\".concat(key, \"\\\" on <\").concat(el.tagName.toLowerCase(), \">: \") + \"value \".concat(value, \" is invalid.\"), e);\n    }\n  }\n  needRemove && el.removeAttribute(key);\n}\nfunction addEventListener(el, event, handler, options) {\n  el.addEventListener(event, handler, options);\n}\nfunction removeEventListener(el, event, handler, options) {\n  el.removeEventListener(event, handler, options);\n}\nfunction patchEvent(el, rawName, prevValue, nextValue) {\n  var instance = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n  // vei = vue event invokers\n  var invokers = el._vei || (el._vei = {});\n  var existingInvoker = invokers[rawName];\n  if (nextValue && existingInvoker) {\n    // patch\n    existingInvoker.value = nextValue;\n  } else {\n    var _parseName = parseName(rawName),\n      _parseName2 = _slicedToArray(_parseName, 2),\n      name = _parseName2[0],\n      options = _parseName2[1];\n    if (nextValue) {\n      // add\n      var invoker = invokers[rawName] = createInvoker(nextValue, instance);\n      addEventListener(el, name, invoker, options);\n    } else if (existingInvoker) {\n      // remove\n      removeEventListener(el, name, existingInvoker, options);\n      invokers[rawName] = undefined;\n    }\n  }\n}\nvar optionsModifierRE = /(?:Once|Passive|Capture)$/;\nfunction parseName(name) {\n  var options;\n  if (optionsModifierRE.test(name)) {\n    options = {};\n    var m;\n    while (m = name.match(optionsModifierRE)) {\n      name = name.slice(0, name.length - m[0].length);\n      options[m[0].toLowerCase()] = true;\n    }\n  }\n  var event = name[2] === ':' ? name.slice(3) : hyphenate(name.slice(2));\n  return [event, options];\n}\n// To avoid the overhead of repeatedly calling Date.now(), we cache\n// and use the same timestamp for all event listeners attached in the same tick.\nvar cachedNow = 0;\nvar p = /*#__PURE__*/Promise.resolve();\nvar getNow = function getNow() {\n  return cachedNow || (p.then(function () {\n    return cachedNow = 0;\n  }), cachedNow = Date.now());\n};\nfunction createInvoker(initialValue, instance) {\n  var invoker = function invoker(e) {\n    // async edge case vuejs/vue#6566\n    // inner click event triggers patch, event handler\n    // attached to outer element during patch, and triggered again. This\n    // happens because browsers fire microtask ticks between event propagation.\n    // this no longer happens for templates in Vue 3, but could still be\n    // theoretically possible for hand-written render functions.\n    // the solution: we save the timestamp when a handler is attached,\n    // and also attach the timestamp to any event that was handled by vue\n    // for the first time (to avoid inconsistent event timestamp implementations\n    // or events fired from iframes, e.g. #2513)\n    // The handler would only fire if the event passed to it was fired\n    // AFTER it was attached.\n    if (!e._vts) {\n      e._vts = Date.now();\n    } else if (e._vts <= invoker.attached) {\n      return;\n    }\n    callWithAsyncErrorHandling(patchStopImmediatePropagation(e, invoker.value), instance, 5 /* ErrorCodes.NATIVE_EVENT_HANDLER */, [e]);\n  };\n  invoker.value = initialValue;\n  invoker.attached = getNow();\n  return invoker;\n}\nfunction patchStopImmediatePropagation(e, value) {\n  if (isArray(value)) {\n    var originalStop = e.stopImmediatePropagation;\n    e.stopImmediatePropagation = function () {\n      originalStop.call(e);\n      e._stopped = true;\n    };\n    return value.map(function (fn) {\n      return function (e) {\n        return !e._stopped && fn && fn(e);\n      };\n    });\n  } else {\n    return value;\n  }\n}\nvar nativeOnRE = /^on[a-z]/;\nvar patchProp = function patchProp(el, key, prevValue, nextValue) {\n  var isSVG = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  var prevChildren = arguments.length > 5 ? arguments[5] : undefined;\n  var parentComponent = arguments.length > 6 ? arguments[6] : undefined;\n  var parentSuspense = arguments.length > 7 ? arguments[7] : undefined;\n  var unmountChildren = arguments.length > 8 ? arguments[8] : undefined;\n  if (key === 'class') {\n    patchClass(el, nextValue, isSVG);\n  } else if (key === 'style') {\n    patchStyle(el, prevValue, nextValue);\n  } else if (isOn(key)) {\n    // ignore v-model listeners\n    if (!isModelListener(key)) {\n      patchEvent(el, key, prevValue, nextValue, parentComponent);\n    }\n  } else if (key[0] === '.' ? (key = key.slice(1), true) : key[0] === '^' ? (key = key.slice(1), false) : shouldSetAsProp(el, key, nextValue, isSVG)) {\n    patchDOMProp(el, key, nextValue, prevChildren, parentComponent, parentSuspense, unmountChildren);\n  } else {\n    // special case for <input v-model type=\"checkbox\"> with\n    // :true-value & :false-value\n    // store value as dom properties since non-string values will be\n    // stringified.\n    if (key === 'true-value') {\n      el._trueValue = nextValue;\n    } else if (key === 'false-value') {\n      el._falseValue = nextValue;\n    }\n    patchAttr(el, key, nextValue, isSVG);\n  }\n};\nfunction shouldSetAsProp(el, key, value, isSVG) {\n  if (isSVG) {\n    // most keys must be set as attribute on svg elements to work\n    // ...except innerHTML & textContent\n    if (key === 'innerHTML' || key === 'textContent') {\n      return true;\n    }\n    // or native onclick with function values\n    if (key in el && nativeOnRE.test(key) && isFunction(value)) {\n      return true;\n    }\n    return false;\n  }\n  // these are enumerated attrs, however their corresponding DOM properties\n  // are actually booleans - this leads to setting it with a string \"false\"\n  // value leading it to be coerced to `true`, so we need to always treat\n  // them as attributes.\n  // Note that `contentEditable` doesn't have this problem: its DOM\n  // property is also enumerated string values.\n  if (key === 'spellcheck' || key === 'draggable' || key === 'translate') {\n    return false;\n  }\n  // #1787, #2840 form property on form elements is readonly and must be set as\n  // attribute.\n  if (key === 'form') {\n    return false;\n  }\n  // #1526 <input list> must be set as attribute\n  if (key === 'list' && el.tagName === 'INPUT') {\n    return false;\n  }\n  // #2766 <textarea type> must be set as attribute\n  if (key === 'type' && el.tagName === 'TEXTAREA') {\n    return false;\n  }\n  // native onclick with string value, must be set as attribute\n  if (nativeOnRE.test(key) && isString(value)) {\n    return false;\n  }\n  return key in el;\n}\nfunction defineCustomElement(options, hydrate) {\n  var Comp = defineComponent(options);\n  var VueCustomElement = /*#__PURE__*/function (_VueElement) {\n    _inherits(VueCustomElement, _VueElement);\n    function VueCustomElement(initialProps) {\n      _classCallCheck(this, VueCustomElement);\n      return _possibleConstructorReturn(this, _getPrototypeOf(VueCustomElement).call(this, Comp, initialProps, hydrate));\n    }\n    return VueCustomElement;\n  }(VueElement);\n  VueCustomElement.def = Comp;\n  return VueCustomElement;\n}\nvar defineSSRCustomElement = function defineSSRCustomElement(options) {\n  // @ts-ignore\n  return defineCustomElement(options, hydrate);\n};\nvar BaseClass = typeof HTMLElement !== 'undefined' ? HTMLElement : /*#__PURE__*/function () {\n  function _class() {\n    _classCallCheck(this, _class);\n  }\n  return _class;\n}();\nvar VueElement = /*#__PURE__*/function (_BaseClass) {\n  _inherits(VueElement, _BaseClass);\n  function VueElement(_def) {\n    var _this;\n    var _props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var hydrate = arguments.length > 2 ? arguments[2] : undefined;\n    _classCallCheck(this, VueElement);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(VueElement).call(this));\n    _this._def = _def;\n    _this._props = _props;\n    /**\n     * @internal\n     */\n    _this._instance = null;\n    _this._connected = false;\n    _this._resolved = false;\n    _this._numberProps = null;\n    if (_this.shadowRoot && hydrate) {\n      hydrate(_this._createVNode(), _this.shadowRoot);\n    } else {\n      if (process.env.NODE_ENV !== 'production' && _this.shadowRoot) {\n        warn(\"Custom element has pre-rendered declarative shadow root but is not \" + \"defined as hydratable. Use `defineSSRCustomElement`.\");\n      }\n      _this.attachShadow({\n        mode: 'open'\n      });\n      if (!_this._def.__asyncLoader) {\n        // for sync component defs we can immediately resolve props\n        _this._resolveProps(_this._def);\n      }\n    }\n    return _this;\n  }\n  _createClass(VueElement, [{\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      this._connected = true;\n      if (!this._instance) {\n        if (this._resolved) {\n          this._update();\n        } else {\n          this._resolveDef();\n        }\n      }\n    }\n  }, {\n    key: \"disconnectedCallback\",\n    value: function disconnectedCallback() {\n      var _this2 = this;\n      this._connected = false;\n      nextTick(function () {\n        if (!_this2._connected) {\n          render(null, _this2.shadowRoot);\n          _this2._instance = null;\n        }\n      });\n    }\n    /**\n     * resolve inner component definition (handle possible async component)\n     */\n  }, {\n    key: \"_resolveDef\",\n    value: function _resolveDef() {\n      var _this3 = this;\n      this._resolved = true;\n      // set initial attrs\n      for (var i = 0; i < this.attributes.length; i++) {\n        this._setAttr(this.attributes[i].name);\n      }\n      // watch future attr changes\n      new MutationObserver(function (mutations) {\n        var _iterator = _createForOfIteratorHelper(mutations),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var m = _step.value;\n            _this3._setAttr(m.attributeName);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }).observe(this, {\n        attributes: true\n      });\n      var resolve = function resolve(def) {\n        var isAsync = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        var props = def.props,\n          styles = def.styles; // cast Number-type props set before resolve\n        var numberProps;\n        if (props && !isArray(props)) {\n          for (var key in props) {\n            var opt = props[key];\n            if (opt === Number || opt && opt.type === Number) {\n              if (key in _this3._props) {\n                _this3._props[key] = toNumber(_this3._props[key]);\n              }\n              (numberProps || (numberProps = Object.create(null)))[camelize$1(key)] = true;\n            }\n          }\n        }\n        _this3._numberProps = numberProps;\n        if (isAsync) {\n          // defining getter/setters on prototype\n          // for sync defs, this already happened in the constructor\n          _this3._resolveProps(def);\n        }\n        // apply CSS\n        _this3._applyStyles(styles);\n        // initial render\n        _this3._update();\n      };\n      var asyncDef = this._def.__asyncLoader;\n      if (asyncDef) {\n        asyncDef().then(function (def) {\n          return resolve(def, true);\n        });\n      } else {\n        resolve(this._def);\n      }\n    }\n  }, {\n    key: \"_resolveProps\",\n    value: function _resolveProps(def) {\n      var _this4 = this;\n      var props = def.props;\n      var declaredPropKeys = isArray(props) ? props : Object.keys(props || {});\n      // check if there are props set pre-upgrade or connect\n      for (var _i = 0, _Object$keys = Object.keys(this); _i < _Object$keys.length; _i++) {\n        var key = _Object$keys[_i];\n        if (key[0] !== '_' && declaredPropKeys.includes(key)) {\n          this._setProp(key, this[key], true, false);\n        }\n      }\n      // defining getter/setters on prototype\n      var _iterator2 = _createForOfIteratorHelper(declaredPropKeys.map(camelize$1)),\n        _step2;\n      try {\n        var _loop = function _loop() {\n          var key = _step2.value;\n          Object.defineProperty(_this4, key, {\n            get: function get() {\n              return this._getProp(key);\n            },\n            set: function set(val) {\n              this._setProp(key, val);\n            }\n          });\n        };\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"_setAttr\",\n    value: function _setAttr(key) {\n      var value = this.getAttribute(key);\n      var camelKey = camelize$1(key);\n      if (this._numberProps && this._numberProps[camelKey]) {\n        value = toNumber(value);\n      }\n      this._setProp(camelKey, value, false);\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_getProp\",\n    value: function _getProp(key) {\n      return this._props[key];\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_setProp\",\n    value: function _setProp(key, val) {\n      var shouldReflect = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var shouldUpdate = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      if (val !== this._props[key]) {\n        this._props[key] = val;\n        if (shouldUpdate && this._instance) {\n          this._update();\n        }\n        // reflect\n        if (shouldReflect) {\n          if (val === true) {\n            this.setAttribute(hyphenate(key), '');\n          } else if (typeof val === 'string' || typeof val === 'number') {\n            this.setAttribute(hyphenate(key), val + '');\n          } else if (!val) {\n            this.removeAttribute(hyphenate(key));\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_update\",\n    value: function _update() {\n      render(this._createVNode(), this.shadowRoot);\n    }\n  }, {\n    key: \"_createVNode\",\n    value: function _createVNode() {\n      var _this5 = this;\n      var vnode = createVNode(this._def, extend({}, this._props));\n      if (!this._instance) {\n        vnode.ce = function (instance) {\n          _this5._instance = instance;\n          instance.isCE = true;\n          // HMR\n          if (process.env.NODE_ENV !== 'production') {\n            instance.ceReload = function (newStyles) {\n              // always reset styles\n              if (_this5._styles) {\n                _this5._styles.forEach(function (s) {\n                  return _this5.shadowRoot.removeChild(s);\n                });\n                _this5._styles.length = 0;\n              }\n              _this5._applyStyles(newStyles);\n              _this5._instance = null;\n              _this5._update();\n            };\n          }\n          var dispatch = function dispatch(event, args) {\n            _this5.dispatchEvent(new CustomEvent(event, {\n              detail: args\n            }));\n          };\n          // intercept emit\n          instance.emit = function (event) {\n            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key2 = 1; _key2 < _len; _key2++) {\n              args[_key2 - 1] = arguments[_key2];\n            }\n            // dispatch both the raw and hyphenated versions of an event\n            // to match Vue behavior\n            dispatch(event, args);\n            if (hyphenate(event) !== event) {\n              dispatch(hyphenate(event), args);\n            }\n          };\n          // locate nearest Vue custom element parent for provide/inject\n          var parent = _this5;\n          while (parent = parent && (parent.parentNode || parent.host)) {\n            if (parent instanceof VueElement) {\n              instance.parent = parent._instance;\n              instance.provides = parent._instance.provides;\n              break;\n            }\n          }\n        };\n      }\n      return vnode;\n    }\n  }, {\n    key: \"_applyStyles\",\n    value: function _applyStyles(styles) {\n      var _this6 = this;\n      if (styles) {\n        styles.forEach(function (css) {\n          var s = document.createElement('style');\n          s.textContent = css;\n          _this6.shadowRoot.appendChild(s);\n          // record for HMR\n          if (process.env.NODE_ENV !== 'production') {\n            (_this6._styles || (_this6._styles = [])).push(s);\n          }\n        });\n      }\n    }\n  }]);\n  return VueElement;\n}(BaseClass);\nfunction useCssModule() {\n  var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '$style';\n  /* istanbul ignore else */\n  {\n    var instance = getCurrentInstance();\n    if (!instance) {\n      process.env.NODE_ENV !== 'production' && warn(\"useCssModule must be called inside setup()\");\n      return EMPTY_OBJ;\n    }\n    var modules = instance.type.__cssModules;\n    if (!modules) {\n      process.env.NODE_ENV !== 'production' && warn(\"Current instance does not have CSS modules injected.\");\n      return EMPTY_OBJ;\n    }\n    var mod = modules[name];\n    if (!mod) {\n      process.env.NODE_ENV !== 'production' && warn(\"Current instance does not have CSS module named \\\"\".concat(name, \"\\\".\"));\n      return EMPTY_OBJ;\n    }\n    return mod;\n  }\n}\n\n/**\n * Runtime helper for SFC's CSS variable injection feature.\n * @private\n */\nfunction useCssVars(getter) {\n  var instance = getCurrentInstance();\n  /* istanbul ignore next */\n  if (!instance) {\n    process.env.NODE_ENV !== 'production' && warn(\"useCssVars is called without current active component instance.\");\n    return;\n  }\n  var updateTeleports = instance.ut = function () {\n    var vars = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getter(instance.proxy);\n    Array.from(document.querySelectorAll(\"[data-v-owner=\\\"\".concat(instance.uid, \"\\\"]\"))).forEach(function (node) {\n      return setVarsOnNode(node, vars);\n    });\n  };\n  var setVars = function setVars() {\n    var vars = getter(instance.proxy);\n    setVarsOnVNode(instance.subTree, vars);\n    updateTeleports(vars);\n  };\n  watchPostEffect(setVars);\n  onMounted(function () {\n    var ob = new MutationObserver(setVars);\n    ob.observe(instance.subTree.el.parentNode, {\n      childList: true\n    });\n    onUnmounted(function () {\n      return ob.disconnect();\n    });\n  });\n}\nfunction setVarsOnVNode(vnode, vars) {\n  if (vnode.shapeFlag & 128 /* ShapeFlags.SUSPENSE */) {\n    var suspense = vnode.suspense;\n    vnode = suspense.activeBranch;\n    if (suspense.pendingBranch && !suspense.isHydrating) {\n      suspense.effects.push(function () {\n        setVarsOnVNode(suspense.activeBranch, vars);\n      });\n    }\n  }\n  // drill down HOCs until it's a non-component vnode\n  while (vnode.component) {\n    vnode = vnode.component.subTree;\n  }\n  if (vnode.shapeFlag & 1 /* ShapeFlags.ELEMENT */ && vnode.el) {\n    setVarsOnNode(vnode.el, vars);\n  } else if (vnode.type === Fragment) {\n    vnode.children.forEach(function (c) {\n      return setVarsOnVNode(c, vars);\n    });\n  } else if (vnode.type === Static) {\n    var _vnode = vnode,\n      el = _vnode.el,\n      anchor = _vnode.anchor;\n    while (el) {\n      setVarsOnNode(el, vars);\n      if (el === anchor) break;\n      el = el.nextSibling;\n    }\n  }\n}\nfunction setVarsOnNode(el, vars) {\n  if (el.nodeType === 1) {\n    var style = el.style;\n    for (var key in vars) {\n      style.setProperty(\"--\".concat(key), vars[key]);\n    }\n  }\n}\nvar TRANSITION = 'transition';\nvar ANIMATION = 'animation';\n// DOM Transition is a higher-order-component based on the platform-agnostic\n// base Transition component, with DOM-specific logic.\nvar Transition = function Transition(props, _ref) {\n  var slots = _ref.slots;\n  return h(BaseTransition, resolveTransitionProps(props), slots);\n};\nTransition.displayName = 'Transition';\nvar DOMTransitionPropsValidators = {\n  name: String,\n  type: String,\n  css: {\n    type: Boolean,\n    default: true\n  },\n  duration: [String, Number, Object],\n  enterFromClass: String,\n  enterActiveClass: String,\n  enterToClass: String,\n  appearFromClass: String,\n  appearActiveClass: String,\n  appearToClass: String,\n  leaveFromClass: String,\n  leaveActiveClass: String,\n  leaveToClass: String\n};\nvar TransitionPropsValidators = Transition.props = /*#__PURE__*/extend({}, BaseTransition.props, DOMTransitionPropsValidators);\n/**\n * #3227 Incoming hooks may be merged into arrays when wrapping Transition\n * with custom HOCs.\n */\nvar callHook = function callHook(hook) {\n  var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  if (isArray(hook)) {\n    hook.forEach(function (h) {\n      return h.apply(void 0, _toConsumableArray(args));\n    });\n  } else if (hook) {\n    hook.apply(void 0, _toConsumableArray(args));\n  }\n};\n/**\n * Check if a hook expects a callback (2nd arg), which means the user\n * intends to explicitly control the end of the transition.\n */\nvar hasExplicitCallback = function hasExplicitCallback(hook) {\n  return hook ? isArray(hook) ? hook.some(function (h) {\n    return h.length > 1;\n  }) : hook.length > 1 : false;\n};\nfunction resolveTransitionProps(rawProps) {\n  var baseProps = {};\n  for (var key in rawProps) {\n    if (!(key in DOMTransitionPropsValidators)) {\n      baseProps[key] = rawProps[key];\n    }\n  }\n  if (rawProps.css === false) {\n    return baseProps;\n  }\n  var _rawProps$name = rawProps.name,\n    name = _rawProps$name === void 0 ? 'v' : _rawProps$name,\n    type = rawProps.type,\n    duration = rawProps.duration,\n    _rawProps$enterFromCl = rawProps.enterFromClass,\n    enterFromClass = _rawProps$enterFromCl === void 0 ? \"\".concat(name, \"-enter-from\") : _rawProps$enterFromCl,\n    _rawProps$enterActive = rawProps.enterActiveClass,\n    enterActiveClass = _rawProps$enterActive === void 0 ? \"\".concat(name, \"-enter-active\") : _rawProps$enterActive,\n    _rawProps$enterToClas = rawProps.enterToClass,\n    enterToClass = _rawProps$enterToClas === void 0 ? \"\".concat(name, \"-enter-to\") : _rawProps$enterToClas,\n    _rawProps$appearFromC = rawProps.appearFromClass,\n    appearFromClass = _rawProps$appearFromC === void 0 ? enterFromClass : _rawProps$appearFromC,\n    _rawProps$appearActiv = rawProps.appearActiveClass,\n    appearActiveClass = _rawProps$appearActiv === void 0 ? enterActiveClass : _rawProps$appearActiv,\n    _rawProps$appearToCla = rawProps.appearToClass,\n    appearToClass = _rawProps$appearToCla === void 0 ? enterToClass : _rawProps$appearToCla,\n    _rawProps$leaveFromCl = rawProps.leaveFromClass,\n    leaveFromClass = _rawProps$leaveFromCl === void 0 ? \"\".concat(name, \"-leave-from\") : _rawProps$leaveFromCl,\n    _rawProps$leaveActive = rawProps.leaveActiveClass,\n    leaveActiveClass = _rawProps$leaveActive === void 0 ? \"\".concat(name, \"-leave-active\") : _rawProps$leaveActive,\n    _rawProps$leaveToClas = rawProps.leaveToClass,\n    leaveToClass = _rawProps$leaveToClas === void 0 ? \"\".concat(name, \"-leave-to\") : _rawProps$leaveToClas;\n  var durations = normalizeDuration(duration);\n  var enterDuration = durations && durations[0];\n  var leaveDuration = durations && durations[1];\n  var _onBeforeEnter = baseProps.onBeforeEnter,\n    onEnter = baseProps.onEnter,\n    _onEnterCancelled = baseProps.onEnterCancelled,\n    _onLeave = baseProps.onLeave,\n    _onLeaveCancelled = baseProps.onLeaveCancelled,\n    _baseProps$onBeforeAp = baseProps.onBeforeAppear,\n    _onBeforeAppear = _baseProps$onBeforeAp === void 0 ? _onBeforeEnter : _baseProps$onBeforeAp,\n    _baseProps$onAppear = baseProps.onAppear,\n    onAppear = _baseProps$onAppear === void 0 ? onEnter : _baseProps$onAppear,\n    _baseProps$onAppearCa = baseProps.onAppearCancelled,\n    _onAppearCancelled = _baseProps$onAppearCa === void 0 ? _onEnterCancelled : _baseProps$onAppearCa;\n  var finishEnter = function finishEnter(el, isAppear, done) {\n    removeTransitionClass(el, isAppear ? appearToClass : enterToClass);\n    removeTransitionClass(el, isAppear ? appearActiveClass : enterActiveClass);\n    done && done();\n  };\n  var finishLeave = function finishLeave(el, done) {\n    el._isLeaving = false;\n    removeTransitionClass(el, leaveFromClass);\n    removeTransitionClass(el, leaveToClass);\n    removeTransitionClass(el, leaveActiveClass);\n    done && done();\n  };\n  var makeEnterHook = function makeEnterHook(isAppear) {\n    return function (el, done) {\n      var hook = isAppear ? onAppear : onEnter;\n      var resolve = function resolve() {\n        return finishEnter(el, isAppear, done);\n      };\n      callHook(hook, [el, resolve]);\n      nextFrame(function () {\n        removeTransitionClass(el, isAppear ? appearFromClass : enterFromClass);\n        addTransitionClass(el, isAppear ? appearToClass : enterToClass);\n        if (!hasExplicitCallback(hook)) {\n          whenTransitionEnds(el, type, enterDuration, resolve);\n        }\n      });\n    };\n  };\n  return extend(baseProps, {\n    onBeforeEnter: function onBeforeEnter(el) {\n      callHook(_onBeforeEnter, [el]);\n      addTransitionClass(el, enterFromClass);\n      addTransitionClass(el, enterActiveClass);\n    },\n    onBeforeAppear: function onBeforeAppear(el) {\n      callHook(_onBeforeAppear, [el]);\n      addTransitionClass(el, appearFromClass);\n      addTransitionClass(el, appearActiveClass);\n    },\n    onEnter: makeEnterHook(false),\n    onAppear: makeEnterHook(true),\n    onLeave: function onLeave(el, done) {\n      el._isLeaving = true;\n      var resolve = function resolve() {\n        return finishLeave(el, done);\n      };\n      addTransitionClass(el, leaveFromClass);\n      // force reflow so *-leave-from classes immediately take effect (#2593)\n      forceReflow();\n      addTransitionClass(el, leaveActiveClass);\n      nextFrame(function () {\n        if (!el._isLeaving) {\n          // cancelled\n          return;\n        }\n        removeTransitionClass(el, leaveFromClass);\n        addTransitionClass(el, leaveToClass);\n        if (!hasExplicitCallback(_onLeave)) {\n          whenTransitionEnds(el, type, leaveDuration, resolve);\n        }\n      });\n      callHook(_onLeave, [el, resolve]);\n    },\n    onEnterCancelled: function onEnterCancelled(el) {\n      finishEnter(el, false);\n      callHook(_onEnterCancelled, [el]);\n    },\n    onAppearCancelled: function onAppearCancelled(el) {\n      finishEnter(el, true);\n      callHook(_onAppearCancelled, [el]);\n    },\n    onLeaveCancelled: function onLeaveCancelled(el) {\n      finishLeave(el);\n      callHook(_onLeaveCancelled, [el]);\n    }\n  });\n}\nfunction normalizeDuration(duration) {\n  if (duration == null) {\n    return null;\n  } else if (isObject(duration)) {\n    return [NumberOf(duration.enter), NumberOf(duration.leave)];\n  } else {\n    var n = NumberOf(duration);\n    return [n, n];\n  }\n}\nfunction NumberOf(val) {\n  var res = toNumber(val);\n  if (process.env.NODE_ENV !== 'production') validateDuration(res);\n  return res;\n}\nfunction validateDuration(val) {\n  if (typeof val !== 'number') {\n    warn(\"<transition> explicit duration is not a valid number - \" + \"got \".concat(JSON.stringify(val), \".\"));\n  } else if (isNaN(val)) {\n    warn(\"<transition> explicit duration is NaN - \" + 'the duration expression might be incorrect.');\n  }\n}\nfunction addTransitionClass(el, cls) {\n  cls.split(/\\s+/).forEach(function (c) {\n    return c && el.classList.add(c);\n  });\n  (el._vtc || (el._vtc = new Set())).add(cls);\n}\nfunction removeTransitionClass(el, cls) {\n  cls.split(/\\s+/).forEach(function (c) {\n    return c && el.classList.remove(c);\n  });\n  var _vtc = el._vtc;\n  if (_vtc) {\n    _vtc.delete(cls);\n    if (!_vtc.size) {\n      el._vtc = undefined;\n    }\n  }\n}\nfunction nextFrame(cb) {\n  requestAnimationFrame(function () {\n    requestAnimationFrame(cb);\n  });\n}\nvar endId = 0;\nfunction whenTransitionEnds(el, expectedType, explicitTimeout, resolve) {\n  var id = el._endId = ++endId;\n  var resolveIfNotStale = function resolveIfNotStale() {\n    if (id === el._endId) {\n      resolve();\n    }\n  };\n  if (explicitTimeout) {\n    return setTimeout(resolveIfNotStale, explicitTimeout);\n  }\n  var _getTransitionInfo = getTransitionInfo(el, expectedType),\n    type = _getTransitionInfo.type,\n    timeout = _getTransitionInfo.timeout,\n    propCount = _getTransitionInfo.propCount;\n  if (!type) {\n    return resolve();\n  }\n  var endEvent = type + 'end';\n  var ended = 0;\n  var end = function end() {\n    el.removeEventListener(endEvent, onEnd);\n    resolveIfNotStale();\n  };\n  var onEnd = function onEnd(e) {\n    if (e.target === el && ++ended >= propCount) {\n      end();\n    }\n  };\n  setTimeout(function () {\n    if (ended < propCount) {\n      end();\n    }\n  }, timeout + 1);\n  el.addEventListener(endEvent, onEnd);\n}\nfunction getTransitionInfo(el, expectedType) {\n  var styles = window.getComputedStyle(el);\n  // JSDOM may return undefined for transition properties\n  var getStyleProperties = function getStyleProperties(key) {\n    return (styles[key] || '').split(', ');\n  };\n  var transitionDelays = getStyleProperties(\"\".concat(TRANSITION, \"Delay\"));\n  var transitionDurations = getStyleProperties(\"\".concat(TRANSITION, \"Duration\"));\n  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);\n  var animationDelays = getStyleProperties(\"\".concat(ANIMATION, \"Delay\"));\n  var animationDurations = getStyleProperties(\"\".concat(ANIMATION, \"Duration\"));\n  var animationTimeout = getTimeout(animationDelays, animationDurations);\n  var type = null;\n  var timeout = 0;\n  var propCount = 0;\n  /* istanbul ignore if */\n  if (expectedType === TRANSITION) {\n    if (transitionTimeout > 0) {\n      type = TRANSITION;\n      timeout = transitionTimeout;\n      propCount = transitionDurations.length;\n    }\n  } else if (expectedType === ANIMATION) {\n    if (animationTimeout > 0) {\n      type = ANIMATION;\n      timeout = animationTimeout;\n      propCount = animationDurations.length;\n    }\n  } else {\n    timeout = Math.max(transitionTimeout, animationTimeout);\n    type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;\n    propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;\n  }\n  var hasTransform = type === TRANSITION && /\\b(transform|all)(,|$)/.test(getStyleProperties(\"\".concat(TRANSITION, \"Property\")).toString());\n  return {\n    type: type,\n    timeout: timeout,\n    propCount: propCount,\n    hasTransform: hasTransform\n  };\n}\nfunction getTimeout(delays, durations) {\n  while (delays.length < durations.length) {\n    delays = delays.concat(delays);\n  }\n  return Math.max.apply(Math, _toConsumableArray(durations.map(function (d, i) {\n    return toMs(d) + toMs(delays[i]);\n  })));\n}\n// Old versions of Chromium (below 61.0.3163.100) formats floating pointer\n// numbers in a locale-dependent way, using a comma instead of a dot.\n// If comma is not replaced with a dot, the input will be rounded down\n// (i.e. acting as a floor function) causing unexpected behaviors\nfunction toMs(s) {\n  return Number(s.slice(0, -1).replace(',', '.')) * 1000;\n}\n// synchronously force layout to put elements into a certain state\nfunction forceReflow() {\n  return document.body.offsetHeight;\n}\nvar positionMap = new WeakMap();\nvar newPositionMap = new WeakMap();\nvar TransitionGroupImpl = {\n  name: 'TransitionGroup',\n  props: /*#__PURE__*/extend({}, TransitionPropsValidators, {\n    tag: String,\n    moveClass: String\n  }),\n  setup: function setup(props, _ref2) {\n    var slots = _ref2.slots;\n    var instance = getCurrentInstance();\n    var state = useTransitionState();\n    var prevChildren;\n    var children;\n    onUpdated(function () {\n      // children is guaranteed to exist after initial render\n      if (!prevChildren.length) {\n        return;\n      }\n      var moveClass = props.moveClass || \"\".concat(props.name || 'v', \"-move\");\n      if (!hasCSSTransform(prevChildren[0].el, instance.vnode.el, moveClass)) {\n        return;\n      }\n      // we divide the work into three loops to avoid mixing DOM reads and writes\n      // in each iteration - which helps prevent layout thrashing.\n      prevChildren.forEach(callPendingCbs);\n      prevChildren.forEach(recordPosition);\n      var movedChildren = prevChildren.filter(applyTranslation);\n      // force reflow to put everything in position\n      forceReflow();\n      movedChildren.forEach(function (c) {\n        var el = c.el;\n        var style = el.style;\n        addTransitionClass(el, moveClass);\n        style.transform = style.webkitTransform = style.transitionDuration = '';\n        var cb = el._moveCb = function (e) {\n          if (e && e.target !== el) {\n            return;\n          }\n          if (!e || /transform$/.test(e.propertyName)) {\n            el.removeEventListener('transitionend', cb);\n            el._moveCb = null;\n            removeTransitionClass(el, moveClass);\n          }\n        };\n        el.addEventListener('transitionend', cb);\n      });\n    });\n    return function () {\n      var rawProps = toRaw(props);\n      var cssTransitionProps = resolveTransitionProps(rawProps);\n      var tag = rawProps.tag || Fragment;\n      prevChildren = children;\n      children = slots.default ? getTransitionRawChildren(slots.default()) : [];\n      for (var i = 0; i < children.length; i++) {\n        var child = children[i];\n        if (child.key != null) {\n          setTransitionHooks(child, resolveTransitionHooks(child, cssTransitionProps, state, instance));\n        } else if (process.env.NODE_ENV !== 'production') {\n          warn(\"<TransitionGroup> children must be keyed.\");\n        }\n      }\n      if (prevChildren) {\n        for (var _i2 = 0; _i2 < prevChildren.length; _i2++) {\n          var _child = prevChildren[_i2];\n          setTransitionHooks(_child, resolveTransitionHooks(_child, cssTransitionProps, state, instance));\n          positionMap.set(_child, _child.el.getBoundingClientRect());\n        }\n      }\n      return createVNode(tag, null, children);\n    };\n  }\n};\nvar TransitionGroup = TransitionGroupImpl;\nfunction callPendingCbs(c) {\n  var el = c.el;\n  if (el._moveCb) {\n    el._moveCb();\n  }\n  if (el._enterCb) {\n    el._enterCb();\n  }\n}\nfunction recordPosition(c) {\n  newPositionMap.set(c, c.el.getBoundingClientRect());\n}\nfunction applyTranslation(c) {\n  var oldPos = positionMap.get(c);\n  var newPos = newPositionMap.get(c);\n  var dx = oldPos.left - newPos.left;\n  var dy = oldPos.top - newPos.top;\n  if (dx || dy) {\n    var s = c.el.style;\n    s.transform = s.webkitTransform = \"translate(\".concat(dx, \"px,\").concat(dy, \"px)\");\n    s.transitionDuration = '0s';\n    return c;\n  }\n}\nfunction hasCSSTransform(el, root, moveClass) {\n  // Detect whether an element with the move class applied has\n  // CSS transitions. Since the element may be inside an entering\n  // transition at this very moment, we make a clone of it and remove\n  // all other transition classes applied to ensure only the move class\n  // is applied.\n  var clone = el.cloneNode();\n  if (el._vtc) {\n    el._vtc.forEach(function (cls) {\n      cls.split(/\\s+/).forEach(function (c) {\n        return c && clone.classList.remove(c);\n      });\n    });\n  }\n  moveClass.split(/\\s+/).forEach(function (c) {\n    return c && clone.classList.add(c);\n  });\n  clone.style.display = 'none';\n  var container = root.nodeType === 1 ? root : root.parentNode;\n  container.appendChild(clone);\n  var _getTransitionInfo2 = getTransitionInfo(clone),\n    hasTransform = _getTransitionInfo2.hasTransform;\n  container.removeChild(clone);\n  return hasTransform;\n}\nvar getModelAssigner = function getModelAssigner(vnode) {\n  var fn = vnode.props['onUpdate:modelValue'] || false;\n  return isArray(fn) ? function (value) {\n    return invokeArrayFns(fn, value);\n  } : fn;\n};\nfunction onCompositionStart(e) {\n  e.target.composing = true;\n}\nfunction onCompositionEnd(e) {\n  var target = e.target;\n  if (target.composing) {\n    target.composing = false;\n    target.dispatchEvent(new Event('input'));\n  }\n}\n// We are exporting the v-model runtime directly as vnode hooks so that it can\n// be tree-shaken in case v-model is never used.\nvar vModelText = {\n  created: function created(el, _ref3, vnode) {\n    var _ref3$modifiers = _ref3.modifiers,\n      lazy = _ref3$modifiers.lazy,\n      trim = _ref3$modifiers.trim,\n      number = _ref3$modifiers.number;\n    el._assign = getModelAssigner(vnode);\n    var castToNumber = number || vnode.props && vnode.props.type === 'number';\n    addEventListener(el, lazy ? 'change' : 'input', function (e) {\n      if (e.target.composing) return;\n      var domValue = el.value;\n      if (trim) {\n        domValue = domValue.trim();\n      }\n      if (castToNumber) {\n        domValue = toNumber(domValue);\n      }\n      el._assign(domValue);\n    });\n    if (trim) {\n      addEventListener(el, 'change', function () {\n        el.value = el.value.trim();\n      });\n    }\n    if (!lazy) {\n      addEventListener(el, 'compositionstart', onCompositionStart);\n      addEventListener(el, 'compositionend', onCompositionEnd);\n      // Safari < 10.2 & UIWebView doesn't fire compositionend when\n      // switching focus before confirming composition choice\n      // this also fixes the issue where some browsers e.g. iOS Chrome\n      // fires \"change\" instead of \"input\" on autocomplete.\n      addEventListener(el, 'change', onCompositionEnd);\n    }\n  },\n  // set value on mounted so it's after min/max for type=\"range\"\n  mounted: function mounted(el, _ref4) {\n    var value = _ref4.value;\n    el.value = value == null ? '' : value;\n  },\n  beforeUpdate: function beforeUpdate(el, _ref5, vnode) {\n    var value = _ref5.value,\n      _ref5$modifiers = _ref5.modifiers,\n      lazy = _ref5$modifiers.lazy,\n      trim = _ref5$modifiers.trim,\n      number = _ref5$modifiers.number;\n    el._assign = getModelAssigner(vnode);\n    // avoid clearing unresolved text. #2302\n    if (el.composing) return;\n    if (document.activeElement === el && el.type !== 'range') {\n      if (lazy) {\n        return;\n      }\n      if (trim && el.value.trim() === value) {\n        return;\n      }\n      if ((number || el.type === 'number') && toNumber(el.value) === value) {\n        return;\n      }\n    }\n    var newValue = value == null ? '' : value;\n    if (el.value !== newValue) {\n      el.value = newValue;\n    }\n  }\n};\nvar vModelCheckbox = {\n  // #4096 array checkboxes need to be deep traversed\n  deep: true,\n  created: function created(el, _, vnode) {\n    el._assign = getModelAssigner(vnode);\n    addEventListener(el, 'change', function () {\n      var modelValue = el._modelValue;\n      var elementValue = getValue(el);\n      var checked = el.checked;\n      var assign = el._assign;\n      if (isArray(modelValue)) {\n        var index = looseIndexOf(modelValue, elementValue);\n        var found = index !== -1;\n        if (checked && !found) {\n          assign(modelValue.concat(elementValue));\n        } else if (!checked && found) {\n          var filtered = _toConsumableArray(modelValue);\n          filtered.splice(index, 1);\n          assign(filtered);\n        }\n      } else if (isSet(modelValue)) {\n        var cloned = new Set(modelValue);\n        if (checked) {\n          cloned.add(elementValue);\n        } else {\n          cloned.delete(elementValue);\n        }\n        assign(cloned);\n      } else {\n        assign(getCheckboxValue(el, checked));\n      }\n    });\n  },\n  // set initial checked on mount to wait for true-value/false-value\n  mounted: setChecked,\n  beforeUpdate: function beforeUpdate(el, binding, vnode) {\n    el._assign = getModelAssigner(vnode);\n    setChecked(el, binding, vnode);\n  }\n};\nfunction setChecked(el, _ref6, vnode) {\n  var value = _ref6.value,\n    oldValue = _ref6.oldValue;\n  el._modelValue = value;\n  if (isArray(value)) {\n    el.checked = looseIndexOf(value, vnode.props.value) > -1;\n  } else if (isSet(value)) {\n    el.checked = value.has(vnode.props.value);\n  } else if (value !== oldValue) {\n    el.checked = looseEqual(value, getCheckboxValue(el, true));\n  }\n}\nvar vModelRadio = {\n  created: function created(el, _ref7, vnode) {\n    var value = _ref7.value;\n    el.checked = looseEqual(value, vnode.props.value);\n    el._assign = getModelAssigner(vnode);\n    addEventListener(el, 'change', function () {\n      el._assign(getValue(el));\n    });\n  },\n  beforeUpdate: function beforeUpdate(el, _ref8, vnode) {\n    var value = _ref8.value,\n      oldValue = _ref8.oldValue;\n    el._assign = getModelAssigner(vnode);\n    if (value !== oldValue) {\n      el.checked = looseEqual(value, vnode.props.value);\n    }\n  }\n};\nvar vModelSelect = {\n  // <select multiple> value need to be deep traversed\n  deep: true,\n  created: function created(el, _ref9, vnode) {\n    var value = _ref9.value,\n      number = _ref9.modifiers.number;\n    var isSetModel = isSet(value);\n    addEventListener(el, 'change', function () {\n      var selectedVal = Array.prototype.filter.call(el.options, function (o) {\n        return o.selected;\n      }).map(function (o) {\n        return number ? toNumber(getValue(o)) : getValue(o);\n      });\n      el._assign(el.multiple ? isSetModel ? new Set(selectedVal) : selectedVal : selectedVal[0]);\n    });\n    el._assign = getModelAssigner(vnode);\n  },\n  // set value in mounted & updated because <select> relies on its children\n  // <option>s.\n  mounted: function mounted(el, _ref10) {\n    var value = _ref10.value;\n    setSelected(el, value);\n  },\n  beforeUpdate: function beforeUpdate(el, _binding, vnode) {\n    el._assign = getModelAssigner(vnode);\n  },\n  updated: function updated(el, _ref11) {\n    var value = _ref11.value;\n    setSelected(el, value);\n  }\n};\nfunction setSelected(el, value) {\n  var isMultiple = el.multiple;\n  if (isMultiple && !isArray(value) && !isSet(value)) {\n    process.env.NODE_ENV !== 'production' && warn(\"<select multiple v-model> expects an Array or Set value for its binding, \" + \"but got \".concat(Object.prototype.toString.call(value).slice(8, -1), \".\"));\n    return;\n  }\n  for (var i = 0, l = el.options.length; i < l; i++) {\n    var option = el.options[i];\n    var optionValue = getValue(option);\n    if (isMultiple) {\n      if (isArray(value)) {\n        option.selected = looseIndexOf(value, optionValue) > -1;\n      } else {\n        option.selected = value.has(optionValue);\n      }\n    } else {\n      if (looseEqual(getValue(option), value)) {\n        if (el.selectedIndex !== i) el.selectedIndex = i;\n        return;\n      }\n    }\n  }\n  if (!isMultiple && el.selectedIndex !== -1) {\n    el.selectedIndex = -1;\n  }\n}\n// retrieve raw value set via :value bindings\nfunction getValue(el) {\n  return '_value' in el ? el._value : el.value;\n}\n// retrieve raw value for true-value and false-value set via :true-value or :false-value bindings\nfunction getCheckboxValue(el, checked) {\n  var key = checked ? '_trueValue' : '_falseValue';\n  return key in el ? el[key] : checked;\n}\nvar vModelDynamic = {\n  created: function created(el, binding, vnode) {\n    callModelHook(el, binding, vnode, null, 'created');\n  },\n  mounted: function mounted(el, binding, vnode) {\n    callModelHook(el, binding, vnode, null, 'mounted');\n  },\n  beforeUpdate: function beforeUpdate(el, binding, vnode, prevVNode) {\n    callModelHook(el, binding, vnode, prevVNode, 'beforeUpdate');\n  },\n  updated: function updated(el, binding, vnode, prevVNode) {\n    callModelHook(el, binding, vnode, prevVNode, 'updated');\n  }\n};\nfunction resolveDynamicModel(tagName, type) {\n  switch (tagName) {\n    case 'SELECT':\n      return vModelSelect;\n    case 'TEXTAREA':\n      return vModelText;\n    default:\n      switch (type) {\n        case 'checkbox':\n          return vModelCheckbox;\n        case 'radio':\n          return vModelRadio;\n        default:\n          return vModelText;\n      }\n  }\n}\nfunction callModelHook(el, binding, vnode, prevVNode, hook) {\n  var modelToUse = resolveDynamicModel(el.tagName, vnode.props && vnode.props.type);\n  var fn = modelToUse[hook];\n  fn && fn(el, binding, vnode, prevVNode);\n}\n// SSR vnode transforms, only used when user includes client-oriented render\n// function in SSR\nfunction initVModelForSSR() {\n  vModelText.getSSRProps = function (_ref12) {\n    var value = _ref12.value;\n    return {\n      value: value\n    };\n  };\n  vModelRadio.getSSRProps = function (_ref13, vnode) {\n    var value = _ref13.value;\n    if (vnode.props && looseEqual(vnode.props.value, value)) {\n      return {\n        checked: true\n      };\n    }\n  };\n  vModelCheckbox.getSSRProps = function (_ref14, vnode) {\n    var value = _ref14.value;\n    if (isArray(value)) {\n      if (vnode.props && looseIndexOf(value, vnode.props.value) > -1) {\n        return {\n          checked: true\n        };\n      }\n    } else if (isSet(value)) {\n      if (vnode.props && value.has(vnode.props.value)) {\n        return {\n          checked: true\n        };\n      }\n    } else if (value) {\n      return {\n        checked: true\n      };\n    }\n  };\n  vModelDynamic.getSSRProps = function (binding, vnode) {\n    if (typeof vnode.type !== 'string') {\n      return;\n    }\n    var modelToUse = resolveDynamicModel(\n    // resolveDynamicModel expects an uppercase tag name, but vnode.type is lowercase\n    vnode.type.toUpperCase(), vnode.props && vnode.props.type);\n    if (modelToUse.getSSRProps) {\n      return modelToUse.getSSRProps(binding, vnode);\n    }\n  };\n}\nvar systemModifiers = ['ctrl', 'shift', 'alt', 'meta'];\nvar modifierGuards = {\n  stop: function stop(e) {\n    return e.stopPropagation();\n  },\n  prevent: function prevent(e) {\n    return e.preventDefault();\n  },\n  self: function self(e) {\n    return e.target !== e.currentTarget;\n  },\n  ctrl: function ctrl(e) {\n    return !e.ctrlKey;\n  },\n  shift: function shift(e) {\n    return !e.shiftKey;\n  },\n  alt: function alt(e) {\n    return !e.altKey;\n  },\n  meta: function meta(e) {\n    return !e.metaKey;\n  },\n  left: function left(e) {\n    return 'button' in e && e.button !== 0;\n  },\n  middle: function middle(e) {\n    return 'button' in e && e.button !== 1;\n  },\n  right: function right(e) {\n    return 'button' in e && e.button !== 2;\n  },\n  exact: function exact(e, modifiers) {\n    return systemModifiers.some(function (m) {\n      return e[\"\".concat(m, \"Key\")] && !modifiers.includes(m);\n    });\n  }\n};\n/**\n * @private\n */\nvar withModifiers = function withModifiers(fn, modifiers) {\n  return function (event) {\n    for (var i = 0; i < modifiers.length; i++) {\n      var guard = modifierGuards[modifiers[i]];\n      if (guard && guard(event, modifiers)) return;\n    }\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key3 = 1; _key3 < _len2; _key3++) {\n      args[_key3 - 1] = arguments[_key3];\n    }\n    return fn.apply(void 0, [event].concat(args));\n  };\n};\n// Kept for 2.x compat.\n// Note: IE11 compat for `spacebar` and `del` is removed for now.\nvar keyNames = {\n  esc: 'escape',\n  space: ' ',\n  up: 'arrow-up',\n  left: 'arrow-left',\n  right: 'arrow-right',\n  down: 'arrow-down',\n  delete: 'backspace'\n};\n/**\n * @private\n */\nvar withKeys = function withKeys(fn, modifiers) {\n  return function (event) {\n    if (!('key' in event)) {\n      return;\n    }\n    var eventKey = hyphenate(event.key);\n    if (modifiers.some(function (k) {\n      return k === eventKey || keyNames[k] === eventKey;\n    })) {\n      return fn(event);\n    }\n  };\n};\nvar vShow = {\n  beforeMount: function beforeMount(el, _ref15, _ref16) {\n    var value = _ref15.value;\n    var transition = _ref16.transition;\n    el._vod = el.style.display === 'none' ? '' : el.style.display;\n    if (transition && value) {\n      transition.beforeEnter(el);\n    } else {\n      setDisplay(el, value);\n    }\n  },\n  mounted: function mounted(el, _ref17, _ref18) {\n    var value = _ref17.value;\n    var transition = _ref18.transition;\n    if (transition && value) {\n      transition.enter(el);\n    }\n  },\n  updated: function updated(el, _ref19, _ref20) {\n    var value = _ref19.value,\n      oldValue = _ref19.oldValue;\n    var transition = _ref20.transition;\n    if (!value === !oldValue) return;\n    if (transition) {\n      if (value) {\n        transition.beforeEnter(el);\n        setDisplay(el, true);\n        transition.enter(el);\n      } else {\n        transition.leave(el, function () {\n          setDisplay(el, false);\n        });\n      }\n    } else {\n      setDisplay(el, value);\n    }\n  },\n  beforeUnmount: function beforeUnmount(el, _ref21) {\n    var value = _ref21.value;\n    setDisplay(el, value);\n  }\n};\nfunction setDisplay(el, value) {\n  el.style.display = value ? el._vod : 'none';\n}\n// SSR vnode transforms, only used when user includes client-oriented render\n// function in SSR\nfunction initVShowForSSR() {\n  vShow.getSSRProps = function (_ref22) {\n    var value = _ref22.value;\n    if (!value) {\n      return {\n        style: {\n          display: 'none'\n        }\n      };\n    }\n  };\n}\nvar rendererOptions = /*#__PURE__*/extend({\n  patchProp: patchProp\n}, nodeOps);\n// lazy create the renderer - this makes core renderer logic tree-shakable\n// in case the user only imports reactivity utilities from Vue.\nvar renderer;\nvar enabledHydration = false;\nfunction ensureRenderer() {\n  return renderer || (renderer = createRenderer(rendererOptions));\n}\nfunction ensureHydrationRenderer() {\n  renderer = enabledHydration ? renderer : createHydrationRenderer(rendererOptions);\n  enabledHydration = true;\n  return renderer;\n}\n// use explicit type casts here to avoid import() calls in rolled-up d.ts\nvar render = function render() {\n  var _ensureRenderer;\n  (_ensureRenderer = ensureRenderer()).render.apply(_ensureRenderer, arguments);\n};\nvar hydrate = function hydrate() {\n  var _ensureHydrationRende;\n  (_ensureHydrationRende = ensureHydrationRenderer()).hydrate.apply(_ensureHydrationRende, arguments);\n};\nvar createApp = function createApp() {\n  var _ensureRenderer2;\n  var app = (_ensureRenderer2 = ensureRenderer()).createApp.apply(_ensureRenderer2, arguments);\n  if (process.env.NODE_ENV !== 'production') {\n    injectNativeTagCheck(app);\n    injectCompilerOptionsCheck(app);\n  }\n  var mount = app.mount;\n  app.mount = function (containerOrSelector) {\n    var container = normalizeContainer(containerOrSelector);\n    if (!container) return;\n    var component = app._component;\n    if (!isFunction(component) && !component.render && !component.template) {\n      // __UNSAFE__\n      // Reason: potential execution of JS expressions in in-DOM template.\n      // The user must make sure the in-DOM template is trusted. If it's\n      // rendered by the server, the template should not contain any user data.\n      component.template = container.innerHTML;\n    }\n    // clear content before mounting\n    container.innerHTML = '';\n    var proxy = mount(container, false, container instanceof SVGElement);\n    if (container instanceof Element) {\n      container.removeAttribute('v-cloak');\n      container.setAttribute('data-v-app', '');\n    }\n    return proxy;\n  };\n  return app;\n};\nvar createSSRApp = function createSSRApp() {\n  var _ensureHydrationRende2;\n  var app = (_ensureHydrationRende2 = ensureHydrationRenderer()).createApp.apply(_ensureHydrationRende2, arguments);\n  if (process.env.NODE_ENV !== 'production') {\n    injectNativeTagCheck(app);\n    injectCompilerOptionsCheck(app);\n  }\n  var mount = app.mount;\n  app.mount = function (containerOrSelector) {\n    var container = normalizeContainer(containerOrSelector);\n    if (container) {\n      return mount(container, true, container instanceof SVGElement);\n    }\n  };\n  return app;\n};\nfunction injectNativeTagCheck(app) {\n  // Inject `isNativeTag`\n  // this is used for component name validation (dev only)\n  Object.defineProperty(app.config, 'isNativeTag', {\n    value: function value(tag) {\n      return isHTMLTag(tag) || isSVGTag(tag);\n    },\n    writable: false\n  });\n}\n// dev only\nfunction injectCompilerOptionsCheck(app) {\n  if (isRuntimeOnly()) {\n    var isCustomElement = app.config.isCustomElement;\n    Object.defineProperty(app.config, 'isCustomElement', {\n      get: function get() {\n        return isCustomElement;\n      },\n      set: function set() {\n        warn(\"The `isCustomElement` config option is deprecated. Use \" + \"`compilerOptions.isCustomElement` instead.\");\n      }\n    });\n    var compilerOptions = app.config.compilerOptions;\n    var msg = \"The `compilerOptions` config option is only respected when using \" + \"a build of Vue.js that includes the runtime compiler (aka \\\"full build\\\"). \" + \"Since you are using the runtime-only build, `compilerOptions` \" + \"must be passed to `@vue/compiler-dom` in the build setup instead.\\n\" + \"- For vue-loader: pass it via vue-loader's `compilerOptions` loader option.\\n\" + \"- For vue-cli: see https://cli.vuejs.org/guide/webpack.html#modifying-options-of-a-loader\\n\" + \"- For vite: pass it via @vitejs/plugin-vue options. See https://github.com/vitejs/vite/tree/main/packages/plugin-vue#example-for-passing-options-to-vuecompiler-dom\";\n    Object.defineProperty(app.config, 'compilerOptions', {\n      get: function get() {\n        warn(msg);\n        return compilerOptions;\n      },\n      set: function set() {\n        warn(msg);\n      }\n    });\n  }\n}\nfunction normalizeContainer(container) {\n  if (isString(container)) {\n    var res = document.querySelector(container);\n    if (process.env.NODE_ENV !== 'production' && !res) {\n      warn(\"Failed to mount app: mount target selector \\\"\".concat(container, \"\\\" returned null.\"));\n    }\n    return res;\n  }\n  if (process.env.NODE_ENV !== 'production' && window.ShadowRoot && container instanceof window.ShadowRoot && container.mode === 'closed') {\n    warn(\"mounting on a ShadowRoot with `{mode: \\\"closed\\\"}` may lead to unpredictable bugs\");\n  }\n  return container;\n}\nvar ssrDirectiveInitialized = false;\n/**\n * @internal\n */\nvar initDirectivesForSSR = function initDirectivesForSSR() {\n  if (!ssrDirectiveInitialized) {\n    ssrDirectiveInitialized = true;\n    initVModelForSSR();\n    initVShowForSSR();\n  }\n};\nexport { Transition, TransitionGroup, VueElement, createApp, createSSRApp, defineCustomElement, defineSSRCustomElement, hydrate, initDirectivesForSSR, render, useCssModule, useCssVars, vModelCheckbox, vModelDynamic, vModelRadio, vModelSelect, vModelText, vShow, withKeys, withModifiers };","map":null,"metadata":{},"sourceType":"module"}